/*
 * WARNING: this file has been generated by
 * Hime Parser Generator 4.4.0
 */

import { readFile } from 'fs/promises'
import {
  Automaton,
  BinaryReader,
  ContextSensitiveLexer,
  GSymbol,
} from 'hime-redist-ts'

/**
 * Represents a lexer (namespace ExpectedTree)
 * @internal
 *
 * Hime.SDK 4.4.0
 */
export class ExpectedTreeLexer extends ContextSensitiveLexer {
  /**
   * The collection of terminals matched by this lexer
   *
   * @remarks
   *
   * The terminals are in an order consistent with the automaton,
   * so that terminal indices in the automaton can be used to retrieve the terminals in this table
   */
  private static readonly terminals = [
    new GSymbol(0x0001, 'Îµ'),
    new GSymbol(0x0002, '$'),
    new GSymbol(0x0007, 'SEPARATOR'),
    new GSymbol(0x0009, 'NAME'),
    new GSymbol(0x000A, 'INTEGER'),
    new GSymbol(0x000C, 'LITERAL_STRING'),
    new GSymbol(0x000D, 'LITERAL_ANY'),
    new GSymbol(0x000E, 'LITERAL_TEXT'),
    new GSymbol(0x000F, 'LITERAL_CLASS'),
    new GSymbol(0x0010, 'UNICODE_BLOCK'),
    new GSymbol(0x0011, 'UNICODE_CATEGORY'),
    new GSymbol(0x0012, 'UNICODE_CODEPOINT'),
    new GSymbol(0x0013, 'UNICODE_SPAN_MARKER'),
    new GSymbol(0x0014, 'OPERATOR_OPTIONAL'),
    new GSymbol(0x0015, 'OPERATOR_ZEROMORE'),
    new GSymbol(0x0016, 'OPERATOR_ONEMORE'),
    new GSymbol(0x0017, 'OPERATOR_UNION'),
    new GSymbol(0x0018, 'OPERATOR_DIFFERENCE'),
    new GSymbol(0x0019, 'TREE_ACTION_PROMOTE'),
    new GSymbol(0x001A, 'TREE_ACTION_DROP'),
    new GSymbol(0x001B, 'BLOCK_OPTIONS'),
    new GSymbol(0x001C, 'BLOCK_TERMINALS'),
    new GSymbol(0x001D, 'BLOCK_RULES'),
    new GSymbol(0x001E, 'BLOCK_CONTEXT'),
    new GSymbol(0x0043, '='),
    new GSymbol(0x0044, ';'),
    new GSymbol(0x0045, '('),
    new GSymbol(0x0046, ')'),
    new GSymbol(0x0048, '{'),
    new GSymbol(0x0049, ','),
    new GSymbol(0x004A, '}'),
    new GSymbol(0x004F, '->'),
    new GSymbol(0x0050, 'fragment'),
    new GSymbol(0x0052, '@'),
    new GSymbol(0x0053, '<'),
    new GSymbol(0x0055, '>'),
    new GSymbol(0x0056, '#'),
    new GSymbol(0x005E, ':'),
    new GSymbol(0x0060, 'grammar'),
    new GSymbol(0x0062, 'NODE_NAME'),
    new GSymbol(0x006E, 'fixture'),
    new GSymbol(0x006F, 'test'),
    new GSymbol(0x0070, 'parser'),
    new GSymbol(0x0071, 'on'),
    new GSymbol(0x0072, 'yields'),
    new GSymbol(0x0073, 'differs'),
    new GSymbol(0x0074, 'fails'),
    new GSymbol(0x0075, 'outputs'),
    new GSymbol(0x0078, '!='),
  ]
  /**
   * Initializes a new instance of the lexer
   *
   * Hime.SDK 4.4.0
   *
   * @param input - The lexer's input
   */
  static async fromString(input: string) {
    const buffer = await readFile('./expected-tree.lexer.bin')
    const automaton = new Automaton(BinaryReader.Create(buffer))
    return new ExpectedTreeLexer(automaton, this.terminals, 0x0007, input)
  }
}

export namespace ExpectedTreeLexer {
  /**
   * Contains the constant IDs for the terminals for this lexer
   *
   * Hime.SDK 4.4.0
   */
  export enum ID {
    /**
     * The unique identifier for terminal SEPARATOR
     */
    TerminalSeparator = 0x0007,
    /**
     * The unique identifier for terminal NAME
     */
    TerminalName = 0x0009,
    /**
     * The unique identifier for terminal INTEGER
     */
    TerminalInteger = 0x000A,
    /**
     * The unique identifier for terminal LITERAL_STRING
     */
    TerminalLiteralString = 0x000C,
    /**
     * The unique identifier for terminal LITERAL_ANY
     */
    TerminalLiteralAny = 0x000D,
    /**
     * The unique identifier for terminal LITERAL_TEXT
     */
    TerminalLiteralText = 0x000E,
    /**
     * The unique identifier for terminal LITERAL_CLASS
     */
    TerminalLiteralClass = 0x000F,
    /**
     * The unique identifier for terminal UNICODE_BLOCK
     */
    TerminalUnicodeBlock = 0x0010,
    /**
     * The unique identifier for terminal UNICODE_CATEGORY
     */
    TerminalUnicodeCategory = 0x0011,
    /**
     * The unique identifier for terminal UNICODE_CODEPOINT
     */
    TerminalUnicodeCodepoint = 0x0012,
    /**
     * The unique identifier for terminal UNICODE_SPAN_MARKER
     */
    TerminalUnicodeSpanMarker = 0x0013,
    /**
     * The unique identifier for terminal OPERATOR_OPTIONAL
     */
    TerminalOperatorOptional = 0x0014,
    /**
     * The unique identifier for terminal OPERATOR_ZEROMORE
     */
    TerminalOperatorZeromore = 0x0015,
    /**
     * The unique identifier for terminal OPERATOR_ONEMORE
     */
    TerminalOperatorOnemore = 0x0016,
    /**
     * The unique identifier for terminal OPERATOR_UNION
     */
    TerminalOperatorUnion = 0x0017,
    /**
     * The unique identifier for terminal OPERATOR_DIFFERENCE
     */
    TerminalOperatorDifference = 0x0018,
    /**
     * The unique identifier for terminal TREE_ACTION_PROMOTE
     */
    TerminalTreeActionPromote = 0x0019,
    /**
     * The unique identifier for terminal TREE_ACTION_DROP
     */
    TerminalTreeActionDrop = 0x001A,
    /**
     * The unique identifier for terminal BLOCK_OPTIONS
     */
    TerminalBlockOptions = 0x001B,
    /**
     * The unique identifier for terminal BLOCK_TERMINALS
     */
    TerminalBlockTerminals = 0x001C,
    /**
     * The unique identifier for terminal BLOCK_RULES
     */
    TerminalBlockRules = 0x001D,
    /**
     * The unique identifier for terminal BLOCK_CONTEXT
     */
    TerminalBlockContext = 0x001E,
    /**
     * The unique identifier for terminal NODE_NAME
     */
    TerminalNodeName = 0x0062,
  }
  /**
   * Contains the constant IDs for the contexts for this lexer
   *
   * Hime.SDK 4.4.0
   */
  export enum Context {
    /**
     * The unique identifier for the default context
     */
    Default = 0,
    /**
     * The unique identifier for context tree
     */
    Tree = 0x0001,
  }
}
